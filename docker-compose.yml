services:

  server:
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
    container_name: weather-app-server
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-weatherapp}
      CORS_ORIGIN: http://localhost:3001
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: weather-app-web
    restart: always
    ports:
      - "3001:3001"
    depends_on:
      server:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      NEXT_PUBLIC_SERVER_URL: http://localhost:3000
    networks:
      - app-network

  postgres:
    image: postgres:16
    container_name: weather-app-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-weatherapp}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
